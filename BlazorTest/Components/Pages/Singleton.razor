@page "/lifetime-demo"
@using System.Diagnostics
@inject ISingletonService  SingletonSvc
@inject IScopedService     ScopedSvc
@inject IServiceProvider       ServiceProvider   

<PageTitle>DI – Lifetime Demo</PageTitle>

<h3 class="mt-4">Dependency Injection – Lifetime Demo</h3>

<div class="card shadow-sm p-3 mt-3">
    <h5>Aktuel instans pr. livstid</h5>
    <table class="table table-sm">
        <thead>
            <tr>
                <th>Lifetime</th>
                <th>GUID</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Singleton</td>
                <td>@_singletonGuid</td>
            </tr>
            <tr>
                <td>Scoped<br />(samme i hele circuit)</td>
                <td>@_scopedGuid</td>
            </tr>
            <tr>
                <td>Transient<br />(ny hver gang)</td>
                <td>@_transientGuid</td>
            </tr>
        </tbody>
    </table>

    <button class="btn btn-primary" type="button" @onclick="Refresh">
        Hent nye GUID’er
    </button>

    <p class="text-muted mt-2">
        Klik <strong>@_clicks</strong> · Senest opdateret: @_timestamp:HH:mm:ss.fff
    </p>
</div>

@code {
    private Guid _singletonGuid;
    private Guid _scopedGuid;
    private Guid _transientGuid;
    private int  _clicks;
    private DateTime _timestamp;

    protected override void OnInitialized()
    {
        _singletonGuid = SingletonSvc.GetGuid();
        _scopedGuid    = ScopedSvc   .GetGuid();
        SetTransient();
    }

    private void Refresh()
    {
        _clicks++;
        _timestamp = DateTime.Now;
        SetTransient();              // ny transient
        // Blazor re‑renderer automatisk efter event‑handler
    }

    private void SetTransient()
    {
        var transient = ServiceProvider.GetRequiredService<ITransientService>();
        _transientGuid = transient.GetGuid();
    }
}
